name: Monthly Release

on:
  schedule:
    - cron: '0 0 1 * *'  # Runs at 00:00 on the 1st of every month
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for commits in the last 30 days
        run: |
          git fetch origin master
          COMMITS=$(git rev-list --count --since="30 days ago" origin/master)
          echo "Commits in last 30 days: $COMMITS"
          if [ "$COMMITS" -lt 2 ]; then
            echo "$COMMITS commits in the last 30 days. Skipping release."
            exit 0
          fi
        shell: bash

      - name: Build OSCR Release
        run: |
          #Requires -Version 5.1
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"

          function Download-FileWithProgress {
              param (
                  [Parameter(Mandatory = $true)][string]$Url,
                  [Parameter(Mandatory = $true)][string]$Destination
              )

              Add-Type -AssemblyName System.Net.Http

              Write-Host "Downloading: $Url"
              $client = New-Object System.Net.Http.HttpClient
              $response = $client.GetAsync($Url, [System.Net.Http.HttpCompletionOption]::ResponseHeadersRead).Result
              $total = $response.Content.Headers.ContentLength
              $stream = $response.Content.ReadAsStreamAsync().Result

              $fileStream = [System.IO.File]::OpenWrite($Destination)
              $buffer = New-Object byte[] 8192
              $read = 0
              $totalRead = 0
              $lastPercent = -1

              do {
                  $read = $stream.Read($buffer, 0, $buffer.Length)
                  if ($read -gt 0) {
                      $fileStream.Write($buffer, 0, $read)
                      $totalRead += $read
                      if ($total) {
                          $percent = [math]::Floor(($totalRead / $total) * 100)
                          if ($percent -ne $lastPercent) {
                              Write-Progress -Activity "Downloading" -Status "$percent% complete" -PercentComplete $percent
                              $lastPercent = $percent
                          }
                      }
                  }
              } while ($read -gt 0)

              $fileStream.Close()
              $stream.Close()
              Write-Progress -Activity "Downloading" -Completed
              Write-Host "Download complete: $Destination"
          }

          function Expand-Zip {
              param (
                  [string]$ZipPath,
                  [string]$OutPath
              )
              Expand-Archive -Path $ZipPath -DestinationPath $OutPath -Force
          }

          $root = Join-Path (Get-Location) "oscr_release"

          if (Test-Path $root) {
              Remove-Item $root -Recurse -Force
          }

          New-Item -ItemType Directory -Path $root | Out-Null
          Set-Location $root

          # Check if Arduino IDE folder exists to skip Steps 1-3
          if (Test-Path "$root\Arduino IDE") {
              Write-Host "Arduino IDE folder already exists. Skipping Steps 1, 2, 3."
          } else {
              ### Step 1: Arduino IDE ###
              Write-Host "Step 1: Downloading Arduino IDE..."
              $ideZip = Join-Path $root "arduino-1.8.19-windows.zip"
              Download-FileWithProgress -Url "https://downloads.arduino.cc/arduino-1.8.19-windows.zip" -Destination $ideZip

              Write-Host "Step 2: Verifying SHA256..."
              $expectedHash = "C704A821089EAB2588F1DEAE775916219B1517FEBD1DD574FF29958DCA873945"
              $hash = (Get-FileHash $ideZip -Algorithm SHA256).Hash
              if ($hash -ne $expectedHash) {
                  Write-Error "Checksum mismatch! Aborting."
                  exit 1
              } else {
                  Write-Host "Checksum OK."
              }

              Write-Host "Step 3: Extracting Arduino IDE..."
              Expand-Zip -ZipPath $ideZip -OutPath $root
              Remove-Item $ideZip

              Rename-Item -Path "$root\arduino-1.8.19" -NewName "Arduino IDE"
          }

          ### Step 4: OSCR Sketch ###
          Write-Host "Step 4: Downloading OSCR sketch..."
          $sketchZip = Join-Path $root "master.zip"
          Download-FileWithProgress -Url "https://github.com/sanni/cartreader/archive/refs/heads/master.zip" -Destination $sketchZip
          Expand-Zip -ZipPath $sketchZip -OutPath $root
          Remove-Item $sketchZip

          $sketchRoot = Join-Path $root "cartreader-master"

          # Delete existing Cart_Reader folder if it exists before moving the new one
          $cartReaderDest = "$root\Arduino IDE\portable\sketchbook\Cart_Reader"
          if (Test-Path $cartReaderDest) {
              Write-Host "Existing Cart_Reader folder found. Removing..."
              Remove-Item $cartReaderDest -Recurse -Force
          }

          # Delete existing SD Card folder if it exists before moving
          $sdCardDest = "$root\SD Card"
          if (Test-Path $sdCardDest) {
              Write-Host "Existing SD Card folder found. Removing..."
              Remove-Item $sdCardDest -Recurse -Force
          }

          # Delete existing libtemp folder if it exists before moving
          $libtempDest = "$root\libtemp"
          if (Test-Path $libtempDest) {
              Write-Host "Existing libtemp folder found. Removing..."
              Remove-Item $libtempDest -Recurse -Force
          }

          # Delete existing libraries folder if it exists before moving
          $librariesDest = "$root\Arduino IDE\portable\sketchbook\libraries"
          if (Test-Path $librariesDest) {
              Write-Host "Existing libraries folder found. Removing..."
              Remove-Item $librariesDest -Recurse -Force
          }

          # Make sure libraries folder exists (you already have this)
          New-Item -ItemType Directory -Path "$root\Arduino IDE\portable\sketchbook\libraries" -Force | Out-Null

          Move-Item "$sketchRoot\Cart_Reader" $cartReaderDest
          Move-Item "$sketchRoot\sd" $sdCardDest
          Move-Item "$sketchRoot\LICENSE" "$root\LICENSE.txt" -Force
          Move-Item "$sketchRoot\tools\oscr_tool\launch_oscr_tool.bat" "$root" -Force
          Move-Item "$sketchRoot\tools\oscr_tool\oscr_tool.ps1" "$root" -Force

          Remove-Item "$sdCardDest\README.md","$cartReaderDest\README.md","$cartReaderDest\LICENSE.txt" -ErrorAction SilentlyContinue
          Remove-Item "$sketchRoot" -Recurse -Force

          ### Step 5: Libraries ###
          Write-Host "Step 5: Downloading Arduino libraries..."
          $libraries = @(
              "greiman/SdFat",
              "olikraus/U8g2_Arduino",
              "adafruit/Adafruit_NeoPixel",
              "mathertel/RotaryEncoder",
              "etherkit/Si5351Arduino",
              "adafruit/RTClib",
              "adafruit/Adafruit_BusIO",
              "PaulStoffregen/FreqCount"
          )

          foreach ($lib in $libraries) {
              $zipFile = "libtemp.zip"
              $zipPath = Join-Path $root $zipFile
              Download-FileWithProgress -Url "https://github.com/$lib/archive/refs/heads/master.zip" -Destination $zipPath
              Expand-Zip -ZipPath $zipPath -OutPath "$root\libtemp"
              $libName = $lib.Split('/')[1]
              Move-Item "$root\libtemp\$libName-master" "$root\Arduino IDE\portable\sketchbook\libraries" -Force
              Remove-Item "$zipPath" -Force
              Remove-Item "$root\libtemp" -Recurse -Force
          }

          ### Step 6: CH341 Drivers ###
          Write-Host "Step 6: Downloading CH341 driver..."
          $drvZip = Join-Path $root "drivers.zip"
          Download-FileWithProgress -Url "https://www.wch.cn/download/file?id=5" -Destination $drvZip
          Expand-Zip -ZipPath $drvZip -OutPath "$root\drivers"
          Move-Item "$root\drivers\CH341SER" "$root\CH341 Drivers" -Force
          Remove-Item "$root\drivers" -Recurse -Force
          Remove-Item $drvZip -Force

          ### Step 7: README ###
          Write-Host "Step 7: Creating README.txt..."
          @"
          1) Install CH341 Drivers by running SETUP.exe in the "CH341 Drivers" folder
          2) Launch arduino.exe found in the "Arduino IDE" directory
          3) In the Arduino IDE go File -> Sketchbook -> Cart_Reader
          4) Then Tools -> Board and select "Arduino/Genuino Mega or Mega 2560"
          5) Followed by Tools -> Port and select your Arduino
          6) In Config.h define your HW version by removing // in front of "#define HWX" where X is your hardware version
          7) Next Sketch -> Upload
          8) Verify that the upload didn't give you any errors
          9) Copy the content of the "SD Card" folder to the root of your SD card
          10) Mark the *.txt files as hidden

          More info: https://github.com/sanni/cartreader/wiki
          "@ | Set-Content -Encoding UTF8 -Path "$root\README.txt"

          ### Step 8: Extracting version from OSCR.cpp ###
          Write-Host "Step 8: Extracting version from OSCR.cpp..."

          $pattern = 'FSTRING_VERSION\[\] = "(.*)";'
          $cppPath = Join-Path $root "Arduino IDE\portable\sketchbook\Cart_Reader\OSCR.cpp"
          $line = Select-String -Path $cppPath -Pattern $pattern | Select-Object -First 1

          if (-not $line) {
              throw "Version string not found in OSCR.cpp"
          }

          $version = [regex]::Match($line.Line, $pattern).Groups[1].Value
          Write-Host "Extracted version: $version"

          # Write version to GitHub Actions environment
          $githubEnv = $env:GITHUB_ENV
          if (-not $githubEnv) {
              throw "`$GITHUB_ENV is not set. Are you running this inside GitHub Actions?"
          }

          Add-Content -Path $githubEnv -Value "OSCR_VERSION=$version"

          ### Step 9: Optimize U8g2 ###
          Write-Host "Step 9: Optimizing U8g2 for size..."
          $u8g2Header = "$root\Arduino IDE\portable\sketchbook\libraries\U8g2_Arduino-master\src\clib\u8g2.h"

          (Get-Content $u8g2Header) `
            -replace '#define U8G2_16BIT', '//#define U8G2_16BIT' `
            -replace '#define U8G2_WITH_HVLINE_SPEED_OPTIMIZATION', '//#define U8G2_WITH_HVLINE_SPEED_OPTIMIZATION' `
            -replace '#define U8G2_WITH_INTERSECTION', '//#define U8G2_WITH_INTERSECTION' `
            -replace '#define U8G2_WITH_CLIP_WINDOW_SUPPORT', '//#define U8G2_WITH_CLIP_WINDOW_SUPPORT' `
            -replace '#define U8G2_WITH_FONT_ROTATION', '//#define U8G2_WITH_FONT_ROTATION' `
            -replace '#define U8G2_WITH_UNICODE', '//#define U8G2_WITH_UNICODE' |
            Set-Content -Encoding ASCII $u8g2Header

          ### Step 10: Create zip ###
          Write-Host "Step 10: Create zip..."
          # Go up one directory
          Set-Location (Split-Path $root -Parent)

          # Define release folder name
          $releaseFolder = "${version}_Portable"

          # Remove old folder if it exists
          if (Test-Path $releaseFolder) {
              Remove-Item $releaseFolder -Recurse -Force
          }

          # Rename oscr_release to versioned folder
          Rename-Item -Path "oscr_release" -NewName $releaseFolder

          # Create zip archive
          Compress-Archive -Path $releaseFolder -DestinationPath "$releaseFolder.zip"

          # Clean up folder after zipping
          if (Test-Path $releaseFolder) {
              Remove-Item $releaseFolder -Recurse -Force
          }

          Write-Host "DONE. Portable Arduino IDE for OSCR is ready."

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.OSCR_VERSION }}
          name: ${{ env.OSCR_VERSION }}
          body: Automated monthly OSCR release
          files: ${{ env.OSCR_VERSION }}_Portable.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sparse checkout OSCR.cpp
        run: |
          git init bump-temp
          cd bump-temp
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git config core.sparseCheckout true
          echo Cart_Reader/OSCR.cpp > .git/info/sparse-checkout
          git pull origin master
        shell: bash

      - name: Bump version in OSCR.cpp and push
        run: |
          cd bump-temp/Cart_Reader

          # Extract current version numbers
          OLD_VERSION=$(grep 'FSTRING_VERSION' OSCR.cpp | sed -E 's/.*"V([0-9]+)\.([0-9]+)".*/\1 \2/')
          MAJOR=$(echo $OLD_VERSION | cut -d' ' -f1)
          MINOR=$(echo $OLD_VERSION | cut -d' ' -f2)

          # Increment version according to your scheme
          if [ "$MINOR" -lt 9 ]; then
            MINOR=$((MINOR + 1))
          else
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="V${MAJOR}.${MINOR}"

          # Replace version in OSCR.cpp
          sed -i -E "s/(FSTRING_VERSION\\[\\] = \")V[0-9]+\\.[0-9]+(\";)/\1${NEW_VERSION}\2/" OSCR.cpp

          # Commit & push changes
          cd ..
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Cart_Reader/OSCR.cpp
          git commit -m "Bump version to ${NEW_VERSION} after monthly release"
          git push origin HEAD:master
        shell: bash
