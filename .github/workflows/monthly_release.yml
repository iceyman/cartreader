name: Monthly Release

on:
  schedule:
    - cron: '0 0 1 * *'  # Runs at 00:00 on the 1st of every month
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for commits in the last 30 days
        run: |
          git fetch origin master
          COMMITS=$(git rev-list --count --since="30 days ago" origin/master)
          echo "Commits in last 30 days: $COMMITS"
          if [ "$COMMITS" -eq 0 ]; then
          echo "No commits in the last 30 days. Skipping release."
          exit 0
          fi
        shell: bash

      - name: Build OSCR Release
        run: |
          @chcp 65001 > nul
          @echo off
          echo Creating OSCR Release
          echo Current task:
          echo.
          echo.
          echo.
          echo.
          echo.
          echo.
          echo Log:

          echo Downloading Arduino IDE
          IF EXIST oscr_release rmdir oscr_release /s /q
          mkdir oscr_release
          cd oscr_release
          powershell Invoke-WebRequest https://downloads.arduino.cc/arduino-1.8.19-windows.zip -OutFile arduino-1.8.19-windows.zip
          FOR /F "usebackq delims=" %%H IN (`powershell -Command "(Get-FileHash 'arduino-1.8.19-windows.zip' -Algorithm SHA256).Hash"`) DO (
          SET HASH=%%H
          )
          IF /I NOT "%HASH%"=="C704A821089EAB2588F1DEAE775916219B1517FEBD1DD574FF29958DCA873945" (
           ECHO Checksum mismatch!
           EXIT /B 1
          ) ELSE (
           ECHO Checksum OK.
          )
          powershell expand-archive arduino-1.8.19-windows.zip
          del arduino-1.8.19-windows.zip
          cd arduino-1.8.19-windows
          ren arduino-1.8.19 "Arduino IDE"
          move "Arduino IDE" ..\"Arduino IDE" >nul
          cd..
          IF EXIST arduino-1.8.19-windows rmdir arduino-1.8.19-windows /s /q

          echo Downloading OSCR sketch
          powershell Invoke-WebRequest https://github.com/sanni/cartreader/archive/refs/heads/master.zip -OutFile master.zip
          powershell expand-archive master.zip
          mkdir "Arduino IDE\portable\sketchbook\libraries"
          move master\cartreader-master\Cart_Reader "Arduino IDE\portable\sketchbook" >nul
          move master\cartreader-master\sd >nul
          move master\cartreader-master\LICENSE LICENSE.txt >nul
          move master\cartreader-master\tools\oscr_tool\launch_oscr_tool.bat >nul
          move master\cartreader-master\tools\oscr_tool\oscr_tool.ps1 >nul
          rename sd "SD Card"
          IF EXIST "SD Card\README.md" del "SD Card\README.md"
          IF EXIST "Arduino IDE\portable\sketchbook\Cart_Reader\README.md" del "Arduino IDE\portable\sketchbook\Cart_Reader\README.md"
          IF EXIST "Arduino IDE\portable\sketchbook\Cart_Reader\LICENSE.txt" del "Arduino IDE\portable\sketchbook\Cart_Reader\LICENSE.txt"
          IF EXIST master rmdir master /s /q
          IF EXIST master.zip del master.zip /q

          echo Downloading Libraries
          set LIBS=greiman/SdFat olikraus/U8g2_Arduino adafruit/Adafruit_NeoPixel mathertel/RotaryEncoder etherkit/Si5351Arduino adafruit/RTClib adafruit/Adafruit_BusIO PaulStoffregen/FreqCount
          for %%L in (%LIBS%) do (
            powershell Invoke-WebRequest https://github.com/%%~L/archive/refs/heads/master.zip -OutFile master.zip
            powershell expand-archive master.zip
            for /F "tokens=2 delims=/" %%A in ("%%L") do move master\%%A-master "Arduino IDE\portable\sketchbook\libraries" > nul
            IF EXIST master rmdir master /s /q
            IF EXIST master.zip del master.zip /q
          )

          echo Downloading CH341 driver
          powershell Invoke-WebRequest https://www.wch.cn/download/file?id=5 -OutFile drivers.zip
          powershell expand-archive drivers.zip
          move drivers\CH341SER CH341SER >nul
          ren CH341SER "CH341 Drivers"
          IF EXIST drivers rmdir drivers /s /q
          IF EXIST drivers.zip del drivers.zip /q

          echo Creating README.txt
          (
            echo 1^) Install CH341 Drivers by running SETUP.exe in the "CH341 Drivers" folder
            echo 2^) Launch arduino.exe found in "Arduino IDE" directory
            echo 3^) In the Arduino IDE go File -^> Sketchbook -^> Cart_Reader
            echo 4^) Then Tools -^> Board and select "Arduino/Genduino Mega or Mega 2560"
            echo 5^) Followed by Tools -^> Port and select your Arduino
            echo 6^) In Config.h define your HW version by removing // in front of "#define HWX" where X is your hardware version
            echo 7^) Next Sketch -^> Upload
            echo 8^) Verify that the upload didn't give you any errors
            echo 9^) Copy the content of the "SD Card" folder to the root of your SD card
            echo 10^) Mark the *.txt files as hidden
            echo.
            echo More info: https://github.com/sanni/cartreader/wiki
          ) > README.txt
       
          echo Extracting version from OSCR.cpp
          powershell -Command "$pattern = 'FSTRING_VERSION\[\] = \"(.*)\";'; $line = Select-String -Path 'Arduino IDE\portable\sketchbook\Cart_Reader\OSCR.cpp' -Pattern $pattern | Select-Object -First 1; if (-not $line) { throw 'Version string not found in OSCR.cpp' }; $version = [regex]::Match($line.Line, $pattern).Groups[1].Value; Set-Content -Path version.txt -Value $version"

          for /f "delims=" %%v in (version.txt) do set "OSCR_VERSION=%%v"
          echo OSCR_VERSION=%OSCR_VERSION%>> %GITHUB_ENV%
          del version.txt

          echo Optimize U8g2 for size
          cd "Arduino IDE\portable\sketchbook\libraries\U8g2_Arduino-master\src\clib\"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_16BIT', '//#define U8G2_16BIT' | Out-File -encoding ASCII u8g2.h"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_WITH_HVLINE_SPEED_OPTIMIZATION', '//#define U8G2_WITH_HVLINE_SPEED_OPTIMIZATION' | Out-File -encoding ASCII u8g2.h"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_WITH_INTERSECTION', '//#define U8G2_WITH_INTERSECTION' | Out-File -encoding ASCII u8g2.h"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_WITH_CLIP_WINDOW_SUPPORT', '//#define U8G2_WITH_CLIP_WINDOW_SUPPORT' | Out-File -encoding ASCII u8g2.h"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_WITH_FONT_ROTATION', '//#define U8G2_WITH_FONT_ROTATION' | Out-File -encoding ASCII u8g2.h"
          powershell -Command "(gc u8g2.h) -replace '#define U8G2_WITH_UNICODE', '//#define U8G2_WITH_UNICODE' | Out-File -encoding ASCII u8g2.h"
          cd..
          cd..
          cd..
          cd..
          cd..
          cd..
          cd..

          echo Create VXX.X_Portable.zip
          cd..
          IF EXIST %OSCR_VERSION%_Portable rmdir %OSCR_VERSION%_Portable /s /q
          ren oscr_release %OSCR_VERSION%_Portable
          powershell compress-archive -Path %OSCR_VERSION%_Portable -DestinationPath %OSCR_VERSION%_Portable.zip
          IF EXIST %OSCR_VERSION%_Portable rmdir %OSCR_VERSION%_Portable /s /q
      
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.OSCR_VERSION }}
          name: ${{ env.OSCR_VERSION }}
          body: Automated monthly OSCR release
          files: ${{ env.OSCR_VERSION }}_Portable.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sparse checkout OSCR.cpp
        run: |
          git init bump-temp
          cd bump-temp
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git config core.sparseCheckout true
          echo Cart_Reader/OSCR.cpp > .git/info/sparse-checkout
          git pull origin master
        shell: bash

      - name: Bump version in OSCR.cpp and push
        run: |
          cd bump-temp/Cart_Reader

          # Extract current version numbers
          OLD_VERSION=$(grep 'FSTRING_VERSION' OSCR.cpp | sed -E 's/.*"V([0-9]+)\.([0-9]+)".*/\1 \2/')
          MAJOR=$(echo $OLD_VERSION | cut -d' ' -f1)
          MINOR=$(echo $OLD_VERSION | cut -d' ' -f2)

          # Increment version according to your scheme
          if [ "$MINOR" -lt 9 ]; then
            MINOR=$((MINOR + 1))
          else
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="V${MAJOR}.${MINOR}"

          # Replace version in OSCR.cpp
          sed -i -E "s/(FSTRING_VERSION\\[\\] = \")V[0-9]+\\.[0-9]+(\";)/\1${NEW_VERSION}\2/" OSCR.cpp

          # Commit & push changes
          cd ..
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Cart_Reader/OSCR.cpp
          git commit -m "Bump version to ${NEW_VERSION} after monthly release"
          git push origin HEAD:master
        shell: bash
